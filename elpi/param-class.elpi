%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                                Trocq                                %
%  _______                   %                       Copyright (C) 2023 MERCE                      %
% |__   __|                  %                (Mitsubishi Electric R&D Centre Europe)              %
%    | |_ __ ___   ___ __ _  %                   Cyril Cohen <cyril.cohen@inria.fr>                %
%    | | '__/ _ \ / __/ _` | %                   Enzo Crance <enzo.crance@inria.fr>                %
%    | | | | (_) | (_| (_| | %               Assia Mahboubi <assia.mahboubi@inria.fr>              %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %            This file is distributed under the terms of the          %
%                        |_| %              GNU Lesser General Public License Version 3            %
%                            %             (see LICENSE file for the text of the license)          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --------------------------------------------------------------------------------------------------
% definition of parametricity classes
% --------------------------------------------------------------------------------------------------

% a parametricity class is a pair of map classes (levels in our hierarchy)
kind map-class type.
type map0  map-class.
type map1  map-class.
type map2a map-class.
type map2b map-class.
type map3  map-class.
type map4  map-class.

kind param-class type.
type pc map-class -> map-class -> param-class.

pred map-class->term i:map-class, o:term.
map-class->term map0 (pglobal Map0 UI) :-
  coq.locate "map0" Map0,
  coq.univ-instance UI [].
map-class->term map1 (pglobal Map1 UI) :-
  coq.locate "map1" Map1,
  coq.univ-instance UI [].
map-class->term map2a (pglobal Map2a UI) :-
  coq.locate "map2a" Map2a,
  coq.univ-instance UI [].
map-class->term map2b (pglobal Map2b UI) :-
  coq.locate "map2b" Map2b,
  coq.univ-instance UI [].
map-class->term map3 (pglobal Map3 UI) :-
  coq.locate "map3" Map3,
  coq.univ-instance UI [].
map-class->term map4 (pglobal Map4 UI) :-
  coq.locate "map4" Map4,
  coq.univ-instance UI [].

pred term->map-class i:term, o:map-class.
term->map-class (pglobal Map0 _)  map0  :- coq.locate "map0"  Map0.
term->map-class (pglobal Map1 _)  map1  :- coq.locate "map1"  Map1.
term->map-class (pglobal Map2a _) map2a :- coq.locate "map2a" Map2a.
term->map-class (pglobal Map2b _) map2b :- coq.locate "map2b" Map2b.
term->map-class (pglobal Map3 _)  map3  :- coq.locate "map3"  Map3.
term->map-class (pglobal Map4 _)  map4  :- coq.locate "map4"  Map4.

pred map-class->string i:map-class, o:string.
map-class->string map0  "0".
map-class->string map1  "1".
map-class->string map2a "2a".
map-class->string map2b "2b".
map-class->string map3  "3".
map-class->string map4  "4".

pred param-class->string i:param-class, o:string.
param-class->string (pc M N) S :-
  S is {map-class->string M} ^ {map-class->string N}.

% names of the fields contained in a witness of a given level
pred map-class->fields i:map-class, o:list string.
map-class->fields map0  [].
map-class->fields map1  ["map"].
map-class->fields map2a ["map", "map_in_R"].
map-class->fields map2b ["map", "R_in_map"].
map-class->fields map3  ["map", "map_in_R", "R_in_map"].
map-class->fields map4  ["map", "map_in_R", "R_in_map", "R_in_mapK"].

pred map-class->cofields i:map-class, o:list string.
map-class->cofields map0  [].
map-class->cofields map1  ["comap"].
map-class->cofields map2a ["comap", "comap_in_R"].
map-class->cofields map2b ["comap", "R_in_comap"].
map-class->cofields map3  ["comap", "comap_in_R", "R_in_comap"].
map-class->cofields map4  ["comap", "comap_in_R", "R_in_comap", "R_in_comapK"].

namespace map-class {

% lower/higher levels at distance 1 from a given level
pred weakenings-from i:map-class, o:list map-class.
weakenings-from map0  [].
weakenings-from map1  [map0].
weakenings-from map2a [map1].
weakenings-from map2b [map1].
weakenings-from map3  [map2a, map2b].
weakenings-from map4  [map3].

pred weakenings-to i:map-class, o:list map-class.
weakenings-to map0  [map1].
weakenings-to map1  [map2a, map2b].
weakenings-to map2a [map3].
weakenings-to map2b [map3].
weakenings-to map3  [map4].
weakenings-to map4  [].

% all possible parametricity classes that can be created by combinations of 2 lists of map classes
pred product i:list map-class, i:list map-class, o:list param-class.
product Ms Ns Classes :-
  std.map Ms (m\ cs\
    std.map Ns (n\ c\ c = pc m n) cs
  ) ClassesLL,
  std.flatten ClassesLL Classes.

% least upper bound containing all the fields of the two provided map classes
pred union i:map-class, i:map-class, o:map-class.
union map4  _     map4.
union map3  map4  map4 :- !.
union map3  _     map3.
union map2b map4  map4 :- !.
union map2b map3  map3 :- !.
union map2b map2a map3 :- !.
union map2b _     map2b.
union map2a map4  map4 :- !.
union map2a map3  map3 :- !.
union map2a map2b map3 :- !.
union map2a _     map2a.
union map1  map4  map4 :- !.
union map1  map3  map3 :- !.
union map1  map2b map2b :- !.
union map1  map2a map2a :- !.
union map1  _     map1.
union map0  M     M.

% greatest lower bound containing the fields in common in the two provided map classes
pred inter i:map-class, i:map-class, o:map-class.
inter map0  _     map0.
inter map1  map0  map0 :- !.
inter map1  _     map1.
inter map2a map0  map0 :- !.
inter map2a map1  map1 :- !.
inter map2a map2b map1 :- !.
inter map2a _     map2a.
inter map2b map0  map0 :- !.
inter map2b map1  map1 :- !.
inter map2b map2a map1 :- !.
inter map2b _     map2b.
inter map3  map4  map3 :- !.
inter map3  M     M.
inter map4  M     M.

% partial order on map classes
pred geq i:map-class, i:map-class.
geq map4  _.
geq map3  M :- std.mem! [map0, map1, map2a, map2b, map3] M.
geq map2a M :- std.mem! [map0, map1, map2a] M.
geq map2b M :- std.mem! [map0, map1, map2b] M.
geq map1  M :- std.mem! [map0, map1] M.
geq map0  map0.

% minimal dependencies to translate a dependent product, see the table in the article
pred dep-pi i:map-class, o:param-class, o:param-class.
dep-pi map0  (pc map0 map0)  (pc map0 map0).
dep-pi map1  (pc map0 map2a) (pc map1 map0).
dep-pi map2a (pc map0 map4)  (pc map2a map0).
dep-pi map2b (pc map0 map2a) (pc map2b map0).
dep-pi map3  (pc map0 map4)  (pc map3 map0).
dep-pi map4  (pc map0 map4)  (pc map4 map0).

% minimal dependencies to translate an arrow type, see the table in the article
pred dep-arrow i:map-class, o:param-class, o:param-class.
dep-arrow map0  (pc map0 map0)  (pc map0 map0).
dep-arrow map1  (pc map0 map1)  (pc map1 map0).
dep-arrow map2a (pc map0 map2b) (pc map2a map0).
dep-arrow map2b (pc map0 map2a) (pc map2b map0).
dep-arrow map3  (pc map0 map3)  (pc map3 map0).
dep-arrow map4  (pc map0 map4)  (pc map4 map0).

} % map-class

namespace param-class {

% extensions of functions over map classes to parametricity classes

pred weakenings-from i:param-class, o:list param-class.
weakenings-from (pc M N) Classes :-
  map-class.weakenings-from M Ms,
  map-class.weakenings-from N Ns,
  map-class.product Ms Ns Classes.

pred weakenings-to i:param-class, o:list param-class.
weakenings-to (pc M N) Classes :-
  map-class.weakenings-to M Ms,
  map-class.weakenings-to N Ns,
  map-class.product Ms Ns Classes.

pred negate i:param-class, o:param-class.
negate (pc M N) (pc N M).

pred union i:param-class, i:param-class, o:param-class.
union (pc M1 N1) (pc M2 N2) (pc M N) :-
  map-class.union M1 M2 M,
  map-class.union N1 N2 N.

pred inter i:param-class, i:param-class, o:param-class.
inter C C' _ :- coq.say C C', fail.
inter (pc M1 N1) (pc M2 N2) (pc M N) :-
  map-class.inter M1 M2 M,
  map-class.inter N1 N2 N.

pred geq i:param-class, i:param-class.
geq (pc M1 N1) (pc M2 N2) :-
  map-class.geq M1 M2,
  map-class.geq N1 N2.

pred dep-pi i:param-class, o:param-class, o:param-class.
dep-pi (pc M N) ClassA ClassB :-
  map-class.dep-pi M ClassAM ClassBM,
  map-class.dep-pi N ClassAN ClassBN,
  union ClassAM {param-class.negate ClassAN} ClassA,
  union ClassBM {param-class.negate ClassBN} ClassB.

pred dep-arrow i:param-class, o:param-class, o:param-class.
dep-arrow (pc M N) ClassA ClassB :-
  map-class.dep-arrow M ClassAM ClassBM,
  map-class.dep-arrow N ClassAN ClassBN,
  union ClassAM {param-class.negate ClassAN} ClassA,
  union ClassBM {param-class.negate ClassBN} ClassB.

% generate a weakening function from a parametricity class to another, by forgetting fields 1 by 1
pred forget i:param-class, i:param-class, o:univ-instance -> term -> term -> term -> term.
forget (pc M N) (pc M N) (_\ _\ _\ r\ r) :- !.
forget (pc M N) (pc M N') ForgetF :- !,
  std.mem {map-class.weakenings-from N} N1,
  forget (pc M N1) (pc M N') ForgetF', !,
  map-class->string M MStr,
  coq.locate
    {calc ("forget_" ^ MStr ^ {map-class->string N} ^ "_" ^ MStr ^ {map-class->string N1})} Forget1,
  ForgetF = (ui\ a\ b\ r\ ForgetF' ui a b (app [pglobal Forget1 ui, a, b, r])).
forget (pc M N) (pc M' N') ForgetF :-
  std.mem {map-class.weakenings-from M} M1,
  forget (pc M1 N) (pc M' N') ForgetF', !,
  map-class->string N NStr,
  coq.locate
    {calc ("forget_" ^ {map-class->string M} ^ NStr ^ "_" ^ {map-class->string M1} ^ NStr)} Forget1,
  ForgetF = (ui\ a\ b\ r\ ForgetF' ui a b (app [pglobal Forget1 ui, a, b, r])).

% succeed if the parametricity class contains a map class over 2b
% this means that a translation of a sort at this class will require univalence,
% and the translation of a dependent product will require funext
pred requires-axiom i:param-class.
requires-axiom (pc M N) :- (std.mem! [map2b, map3, map4] M ; std.mem! [map2b, map3, map4] N).

} % param-class
